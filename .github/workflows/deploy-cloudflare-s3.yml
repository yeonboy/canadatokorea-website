name: Deploy to AWS S3 + CloudFront

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  S3_BUCKET: canadatokorea-website
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    # S3 동기화 (캐시 최적화 헤더 포함)
    - name: Sync to S3 with cache headers
      run: |
        # HTML 파일 (짧은 캐시)
        aws s3 sync ./out s3://${{ env.S3_BUCKET }} \
          --exclude "*" --include "*.html" \
          --cache-control "public, max-age=0, no-cache, no-store, must-revalidate" \
          --delete
        
        # CSS/JS 파일 (1년 캐시)
        aws s3 sync ./out s3://${{ env.S3_BUCKET }} \
          --exclude "*" --include "*.css" --include "*.js" \
          --cache-control "public, max-age=31536000, immutable" \
          --delete
        
        # 이미지 파일 (1주일 캐시)
        aws s3 sync ./out s3://${{ env.S3_BUCKET }} \
          --exclude "*" --include "*.jpg" --include "*.jpeg" --include "*.png" --include "*.gif" --include "*.webp" --include "*.svg" \
          --cache-control "public, max-age=604800" \
          --delete
        
        # 나머지 파일
        aws s3 sync ./out s3://${{ env.S3_BUCKET }} \
          --exclude "*.html" --exclude "*.css" --exclude "*.js" --exclude "*.jpg" --exclude "*.jpeg" --exclude "*.png" --exclude "*.gif" --exclude "*.webp" --exclude "*.svg" \
          --delete

    # CloudFront 무효화 (아이콘/OG/HTML 중심)
    - name: Invalidate CloudFront
      if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths \
            "/favicon*" \
            "/og-default.jpg*" \
            "/site.webmanifest" \
            "/sitemap.xml" \
            "/robots.txt" \
            "/*"

  # 배포 후 성능 테스트
  performance-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          https://canadatokorea.com
          https://canadatokorea.com/real-korea-now
          https://canadatokorea.com/tools/cost-estimator
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

